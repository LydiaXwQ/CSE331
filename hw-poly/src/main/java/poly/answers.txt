## CSE 331 hw-poly Questions
## Part 0
###########################################################################

1. Multiplication Pseudocode
    p: this poly (the first polynomial)
    q: p (the poly passed in)
    r: a copy of p
    output: a result holder holding the final result

    output = p * q:
    (Special case:
    if q = 0, or p is NaN or q is NaN, return NaN)
    {inv: output = p * (r_0, r_1, ... + r_i-1) where r_i is the ith term in r}
    for each term, t_p in p:
        set r = q by making a term-by-term copy of all terms in q to r
        for each term, t_r in r:
        replace t_r in r by doing multiplication of t_r with t_p
        add r into the output.


2. Division Pseudocode
        //If p(the poly they pass in) = 0 or this poly is NaN or p is NaN, returns NaN
        //Create a RatPoly named remainder and initialize it with holding this poly first.
        //Create an empty poly use to holding quotient ---> named quotient

        inv: thisPoly = p * quotient + remainderï¼Œ where p is the poly they pass in (divisor), and
        this poly is the dividend

        //while remainder is not empty, and the degree of remainder's highest term (tr) is
        //greater than or equal to the degree of divisor (p) 's highest term (td) continue looping:

            // term, tq,  in quotient = tr / td
            // Convert this term into type RatPoly, and add it into my current quotient poly
            // update remainder into the new remainder:
               remainder = remainder - (tq * p)

            Continue looping until when remainder is empty && the degree of tr < the degree of td
            (We stop until it's divided evenly or the divisor cannot be further divided)


3. Division Example: (x3+x-1) / (x+1) = x2-x+2
    r = x^3+x-1
    p = x+1
    q = null, q_post = x2-x+2


    1. while remainder is not empty and remainder's term with the highest degree(tr) is
        greater than or equal to divisor's (p) term with the highest degree(td), continue looping:

        Iteration 1: r = x^3+x-1, p = x+1, q = null, tr = x^3, td = x

            2.1 get first term, tq, in quotient:
                tq = tr / td = x^2
            2.2 Convert this term into type RatPoly, and add it into my current quotient poly:
                q = q + tq, so now q = x^2
            2.3 update remainder into the new remainder: r = r - (tq * p)
                r = x^3+x-1 - (x^2 * (x+1)) = -x^2+x-1

        Iteration 2: r = -x^2+x-1, p = x+1, q = x^2, tr = -x^2, td = x

            2.1 get second term, tq, in quotient:
                tq = tr / td = -x
            2.2 Convert this term into type RatPoly, and add it into my current quotient poly:
                q = q + tq, so now q = x^2-x
            2.3 update remainder into the new remainder: r = r - (tq * p)
                r = -x^2+x-1 - ((-x) * (x+1)) = 2x-1

        Iteration 3: r = 2x-1, p = x+1, q = x^2-x, tr = 2x, td = x

            2.1 get third term, tq, in quotient:
                tq = tr / td = 2
            2.2 Convert this term into type RatPoly, and add it into my current quotient poly:
                q = q + tq, so now q = x^2-x+2
            2.3 update remainder into the new remainder: r = r - (tq * p)
                r = 2x-1 - (2 * (x+1)) = -3

        Since the degree of tr < the degree of td (0 < 1), we stop looping
        --> We're done! q = (x^2-x+2)


## Part 1
###########################################################################

1. Weakened Rep Invariant

    The constructor RatNum(int n, int d) should remove the portion involves gcd because the new
    rep invariant don't require poly to be in reduced form.
    Advantage of this change: Make the code more efficient by reducing the time complexity for
                              constructing a new RatNum.
                              With no loop inside, now complexity reduced to O(1)
    Disadvantage: This decrease the code clarity, by looking the constructor itself, we won't know
                  the rational number we will have eventually is in reduced form, when constructor
                  represent the construction of a rational number.

    toString method needs to use gcd inside to adhere to its spec for printing in reduced form.
    Advantage: Increase the code clarity that the user will know the printed form is in reduced form,
                this also clearer to see it adheres to its specification.
    Disadvantage: Making the toString method less efficient by introducing the loop from gcd method.

    equals method needs to use gcd inside to return true for the same rational number
    Advantage: This adds clarity in code, because it shows two rational number could
                (i.e 1/2, 2/4) be same in value.
    Disadvantage: Increase in time complexity by introducing loop from gcd.

    hashCode method needs to use gcd inside to return the same hashcode for the same rational number
    Advantage: This could add more clarity to the code, because we will know two numbers that have the same
                value (i.e 1/2, 2/4) will have the same hashcode.
    Disadvantage: Increase in time complexity by introducing loop from gcd.



2. Alternate add, sub, mul, div
    It fails to meet the Class specification. While the specification says RatNum class represents
    an immutable rational number, the new version of the method does mutate it.



3. Constructor checkReps
    Because it's an immutable class, where all the fields are declared as final,
    so once they are initialized, they can't be mutated through-out the whole implementation.
    Also, for the methods, they return a new RatNum without altering the original object.
    Therefore, we only need to check if our initialization is valid in constructor,
    and once we check it is initialized correctly, the object won't change so that it will
    always satisfy the invariant.




## Part 2
###########################################################################

1. Calls to checkRep in RatTerm
    I only have checkRep() at the end of the constructor, because it is an immutable class,
    which once my instance is constructed, there's no way to change it later on (fields are with final
    key word, and methods return a new object without mutating the original one).
    Therefore, I only need to check if my constructor breaks the invariant or not.



2. Weakened Rep Invariant
    toString should add a check to say if coefficient is 0, we want to append "0" for holding its spec.
    Advantage: Adds more clarity on how do we deal with zeros. It's more intuitive to do in this way
                than enforcing all 0 coeff term to have 0 expt, and say they are equivalent in value.
    Disadvantage: Let the code less efficient by adding one additional check seeing if it is zero or not.

    hashcode should add a check to say if the coeff is zero, then expt should also be zero.
    Advantage: Increase clarity by explicitly checking the zero case (when coeff = 0).
    Disadvantage: Needs to add additional check and call isZero method which will make it slower than original.


3. Alternate Rep Invariant
    The constructor need to be changed because when passing in NaN as coefficient, we want to set the
    expt = 0 instead of e.

    Advantage: Add clarity in the code, because it's more intuitive to say a term is NaN than NaN * x^e.
    Disadvantage: Add a little bit more complexity to the code by adding an extra check in the constructor
                  to set c = NaN, e = 0 if the passing in is a NaN.


4. Preferred Invariants





## Part 3
###########################################################################

1. Calls to checkRep in RatPoly
   I have checkRep() at the end of the constructor because I need to check if all my fields hold the invariant
   after initialization in the constructor. I also have checkRep() at the beginning and end of all public methods
   because even though the class itself is immutable, but we can still manipulate the inner array list to
   modify the things stored in the poly so we still need to call checkRep() on all public methods.


2. Alternate Representation
   Advantage: It is easier for us to do the coeff and expt arithmetic, because instead of
              first finding the term, we could directly do arithmetic on coeff and expt.
   Disadvantage: Creating two list to store expt and coeff separately will make our code
                 less efficient, because now we have to traverse two lists to get expt and coeff,
                 while we only need to traverse one list before. Also, this will increase space complexity
                 by using the extra list.

   I prefer representing polynomial using terms because it is more intuitive and easy
   to keep track of terms rather than exponent and coeff separately.


